import Search from './Search.js';
import MovieList from './MovieList.js';
import Add from './Add.js';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      filteredItems: null,
      query: '',
      items: [{ title: 'Mean Girls', watched: true }, { title: 'Hackers', watched: true }, { title: 'The Grey', watched: true }, { title: 'Sunshine', watched: true }, { title: 'Ex Machina', watched: true }]
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleClick = this.handleClick.bind(this);
    this.handleAdd = this.handleAdd.bind(this);
  }

  handleChange(e) {
    this.setState({ query: e.target.value });
  }

  handleClick() {
    var list = this.state.items.filter(item => item.title.toLowerCase().includes(this.state.query.toLowerCase()));
    this.setState({ filteredItems: list });
    event.preventDefault();
  }

  handleAdd() {
    array.push({ title: this.state.query, watched: true });
    this.setState({ items: array });
    event.preventDefault();
  }

  render() {
    let movies;
    movies = this.state.filteredItems ? this.state.filteredItems : this.state.items;

    return React.createElement(
      'div',
      { className: 'movie-list' },
      React.createElement(
        'h2',
        null,
        'MovieList'
      ),
      React.createElement(
        'nav',
        { className: 'add-movie' },
        React.createElement(Add, { value: this.state.item, handleTitle: this.handleChange, handleAdd: this.handleAdd })
      ),
      React.createElement(Search, { value: this.state.query, handleChange: this.handleChange, handleClick: this.handleClick }),
      React.createElement(
        'div',
        { className: 'movie-list-entry' },
        React.createElement(MovieList, { items: movies })
      )
    );
  }
};

let array = [];

export default App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC5qc3giXSwibmFtZXMiOlsiU2VhcmNoIiwiTW92aWVMaXN0IiwiQWRkIiwiQXBwIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic3RhdGUiLCJmaWx0ZXJlZEl0ZW1zIiwicXVlcnkiLCJpdGVtcyIsInRpdGxlIiwid2F0Y2hlZCIsImhhbmRsZUNoYW5nZSIsImJpbmQiLCJoYW5kbGVDbGljayIsImhhbmRsZUFkZCIsImUiLCJzZXRTdGF0ZSIsInRhcmdldCIsInZhbHVlIiwibGlzdCIsImZpbHRlciIsIml0ZW0iLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImFycmF5IiwicHVzaCIsInJlbmRlciIsIm1vdmllcyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsTUFBUCxNQUFtQixhQUFuQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsZ0JBQXRCO0FBQ0EsT0FBT0MsR0FBUCxNQUFnQixVQUFoQjs7QUFHQSxNQUFNQyxHQUFOLFNBQWtCQyxNQUFNQyxTQUF4QixDQUFrQztBQUNoQ0MsY0FBWUMsS0FBWixFQUFtQjtBQUNqQixVQUFNQSxLQUFOO0FBQ0EsU0FBS0MsS0FBTCxHQUFhO0FBQ1hDLHFCQUFnQixJQURMO0FBRVhDLGFBQU8sRUFGSTtBQUdYQyxhQUFPLENBQ0wsRUFBQ0MsT0FBTyxZQUFSLEVBQXNCQyxTQUFTLElBQS9CLEVBREssRUFFTCxFQUFDRCxPQUFPLFNBQVIsRUFBbUJDLFNBQVMsSUFBNUIsRUFGSyxFQUdMLEVBQUNELE9BQU8sVUFBUixFQUFvQkMsU0FBUyxJQUE3QixFQUhLLEVBSUwsRUFBQ0QsT0FBTyxVQUFSLEVBQW9CQyxTQUFTLElBQTdCLEVBSkssRUFLTCxFQUFDRCxPQUFPLFlBQVIsRUFBc0JDLFNBQVMsSUFBL0IsRUFMSztBQUhJLEtBQWI7QUFXQSxTQUFLQyxZQUFMLEdBQW9CLEtBQUtBLFlBQUwsQ0FBa0JDLElBQWxCLENBQXVCLElBQXZCLENBQXBCO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQixLQUFLQSxXQUFMLENBQWlCRCxJQUFqQixDQUFzQixJQUF0QixDQUFuQjtBQUNBLFNBQUtFLFNBQUwsR0FBaUIsS0FBS0EsU0FBTCxDQUFlRixJQUFmLENBQW9CLElBQXBCLENBQWpCO0FBQ0Q7O0FBRURELGVBQWFJLENBQWIsRUFBZ0I7QUFDZCxTQUFLQyxRQUFMLENBQWMsRUFBQ1QsT0FBT1EsRUFBRUUsTUFBRixDQUFTQyxLQUFqQixFQUFkO0FBQ0Q7O0FBRURMLGdCQUFjO0FBQ1osUUFBSU0sT0FBTyxLQUFLZCxLQUFMLENBQVdHLEtBQVgsQ0FBaUJZLE1BQWpCLENBQXdCQyxRQUM3QkEsS0FBS1osS0FBTCxDQUFXYSxXQUFYLEdBQXlCQyxRQUF6QixDQUFrQyxLQUFLbEIsS0FBTCxDQUFXRSxLQUFYLENBQWlCZSxXQUFqQixFQUFsQyxDQURLLENBQVg7QUFFQSxTQUFLTixRQUFMLENBQWMsRUFBQ1YsZUFBZWEsSUFBaEIsRUFBZDtBQUNBSyxVQUFNQyxjQUFOO0FBQ0Q7O0FBRURYLGNBQVc7QUFDVFksVUFBTUMsSUFBTixDQUFXLEVBQUNsQixPQUFNLEtBQUtKLEtBQUwsQ0FBV0UsS0FBbEIsRUFBeUJHLFNBQVMsSUFBbEMsRUFBWDtBQUNBLFNBQUtNLFFBQUwsQ0FBYyxFQUFDUixPQUFPa0IsS0FBUixFQUFkO0FBQ0FGLFVBQU1DLGNBQU47QUFDRDs7QUFFREcsV0FBUztBQUNQLFFBQUlDLE1BQUo7QUFDQUEsYUFBUyxLQUFLeEIsS0FBTCxDQUFXQyxhQUFYLEdBQTJCLEtBQUtELEtBQUwsQ0FBV0MsYUFBdEMsR0FBc0QsS0FBS0QsS0FBTCxDQUFXRyxLQUExRTs7QUFFQSxXQUNFO0FBQUE7QUFBQSxRQUFLLFdBQVUsWUFBZjtBQUNFO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FERjtBQUVJO0FBQUE7QUFBQSxVQUFLLFdBQVUsV0FBZjtBQUNFLDRCQUFDLEdBQUQsSUFBSyxPQUFPLEtBQUtILEtBQUwsQ0FBV2dCLElBQXZCLEVBQTZCLGFBQWEsS0FBS1YsWUFBL0MsRUFBNkQsV0FBVyxLQUFLRyxTQUE3RTtBQURGLE9BRko7QUFLTywwQkFBQyxNQUFELElBQVEsT0FBTyxLQUFLVCxLQUFMLENBQVdFLEtBQTFCLEVBQWlDLGNBQWMsS0FBS0ksWUFBcEQsRUFBa0UsYUFBYSxLQUFLRSxXQUFwRixHQUxQO0FBTUk7QUFBQTtBQUFBLFVBQUssV0FBVSxrQkFBZjtBQUNFLDRCQUFDLFNBQUQsSUFBVyxPQUFPZ0IsTUFBbEI7QUFERjtBQU5KLEtBREY7QUFZRDtBQXBEK0IsQ0FxRGpDOztBQUVELElBQUlILFFBQVEsRUFBWjs7QUFFQSxlQUFlMUIsR0FBZiIsImZpbGUiOiJBcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2VhcmNoIGZyb20gJy4vU2VhcmNoLmpzJztcbmltcG9ydCBNb3ZpZUxpc3QgZnJvbSAnLi9Nb3ZpZUxpc3QuanMnO1xuaW1wb3J0IEFkZCBmcm9tICcuL0FkZC5qcyc7XG5cblxuY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGZpbHRlcmVkSXRlbXMgOiBudWxsLFxuICAgICAgcXVlcnk6ICcnLFxuICAgICAgaXRlbXM6IFtcbiAgICAgICAge3RpdGxlOiAnTWVhbiBHaXJscycsIHdhdGNoZWQ6IHRydWV9LFxuICAgICAgICB7dGl0bGU6ICdIYWNrZXJzJywgd2F0Y2hlZDogdHJ1ZX0sXG4gICAgICAgIHt0aXRsZTogJ1RoZSBHcmV5Jywgd2F0Y2hlZDogdHJ1ZX0sXG4gICAgICAgIHt0aXRsZTogJ1N1bnNoaW5lJywgd2F0Y2hlZDogdHJ1ZX0sXG4gICAgICAgIHt0aXRsZTogJ0V4IE1hY2hpbmEnLCB3YXRjaGVkOiB0cnVlfSxcbiAgICAgIF1cbiAgICB9O1xuICAgIHRoaXMuaGFuZGxlQ2hhbmdlID0gdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZUNsaWNrID0gdGhpcy5oYW5kbGVDbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlQWRkID0gdGhpcy5oYW5kbGVBZGQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZShlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7cXVlcnk6IGUudGFyZ2V0LnZhbHVlfSk7XG4gIH1cblxuICBoYW5kbGVDbGljaygpIHtcbiAgICB2YXIgbGlzdCA9IHRoaXMuc3RhdGUuaXRlbXMuZmlsdGVyKGl0ZW0gPT4gXG4gICAgICAgICAgaXRlbS50aXRsZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHRoaXMuc3RhdGUucXVlcnkudG9Mb3dlckNhc2UoKSkpO1xuICAgIHRoaXMuc2V0U3RhdGUoe2ZpbHRlcmVkSXRlbXM6IGxpc3R9KSBcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgaGFuZGxlQWRkKCl7XG4gICAgYXJyYXkucHVzaCh7dGl0bGU6dGhpcy5zdGF0ZS5xdWVyeSwgd2F0Y2hlZDogdHJ1ZX0pXG4gICAgdGhpcy5zZXRTdGF0ZSh7aXRlbXM6IGFycmF5fSlcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCBtb3ZpZXM7IFxuICAgIG1vdmllcyA9IHRoaXMuc3RhdGUuZmlsdGVyZWRJdGVtcyA/IHRoaXMuc3RhdGUuZmlsdGVyZWRJdGVtcyA6IHRoaXMuc3RhdGUuaXRlbXNcbiAgICBcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb3ZpZS1saXN0XCIgPlxuICAgICAgICA8aDI+TW92aWVMaXN0PC9oMj5cbiAgICAgICAgICA8bmF2IGNsYXNzTmFtZT1cImFkZC1tb3ZpZVwiID5cbiAgICAgICAgICAgIDxBZGQgdmFsdWU9e3RoaXMuc3RhdGUuaXRlbX0gaGFuZGxlVGl0bGU9e3RoaXMuaGFuZGxlQ2hhbmdlfSBoYW5kbGVBZGQ9e3RoaXMuaGFuZGxlQWRkfS8+XG4gICAgICAgICAgPC9uYXY+XG4gICAgICAgICAgICAgPFNlYXJjaCB2YWx1ZT17dGhpcy5zdGF0ZS5xdWVyeX0gaGFuZGxlQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0gaGFuZGxlQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9IC8+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb3ZpZS1saXN0LWVudHJ5XCI+XG4gICAgICAgICAgICA8TW92aWVMaXN0IGl0ZW1zPXttb3ZpZXN9Lz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn07XG5cbmxldCBhcnJheSA9IFtdO1xuXG5leHBvcnQgZGVmYXVsdCBBcHA7Il19
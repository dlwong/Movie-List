import Search from './Search.js';
import MovieList from './MovieList.js';
import Add from './Add.js';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      filteredItems: null,
      query: '',
      items: [{ title: 'Mean Girls', watched: true }, { title: 'Hackers', watched: true }, { title: 'The Grey', watched: true }, { title: 'Sunshine', watched: true }, { title: 'Ex Machina', watched: true }]
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleClick = this.handleClick.bind(this);
    this.handleAdd = this.handleAdd.bind(this);
    this.handleWatch = this.handleWatch.bind(this);
    this.handleToggle = this.handleToggle.bind(this);
  }

  handleToggle(e) {
    var newMovies = [...this.state.items];

    newMovies = newMovies.map(movie => {
      if (movie.title === e) {
        movie.watched = !movie.watched;
      }
      return movie;
    });
    console.log(e);
  }

  handleChange(e) {
    this.setState({ query: e.target.value });
  }

  handleClick() {
    var list = this.state.items.filter(item => item.title.toLowerCase().includes(this.state.query.toLowerCase()));
    this.setState({ filteredItems: list });
    event.preventDefault();
  }

  handleAdd() {
    array.push({ title: this.state.query, watched: true });
    this.setState({ items: array });
    event.preventDefault();
  }

  handleWatch() {
    var list = this.state.items.filter(item => item.watched === true);
    this.setState({ filteredItems: list });
    event.preventDefault();
  }

  handleNotWatch() {
    var list = this.state.items.filter(item => item.watched === false);
    this.setState({ filteredItems: list });
    event.preventDefault();
  }

  render() {
    let movies;
    movies = this.state.filteredItems ? this.state.filteredItems : this.state.items;

    return React.createElement(
      'div',
      { className: 'movie-list' },
      React.createElement(
        'h2',
        null,
        'MovieList'
      ),
      React.createElement(
        'nav',
        { className: 'add-movie' },
        React.createElement(Add, { value: this.state.item, handleTitle: this.handleChange, handleAdd: this.handleAdd })
      ),
      React.createElement(Search, { value: this.state.query, handleChange: this.handleChange, handleClick: this.handleClick }),
      React.createElement('input', { type: 'submit', onClick: () => this.handleWatch(), value: 'Watched' }),
      React.createElement('input', { type: 'submit', onClick: () => this.handleNotWatch(), value: 'Not Watch' }),
      React.createElement(
        'div',
        { className: 'movie-list-entry' },
        React.createElement(MovieList, { items: movies, handleToggle: this.handleToggle })
      )
    );
  }
};

let array = [];

export default App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC5qc3giXSwibmFtZXMiOlsiU2VhcmNoIiwiTW92aWVMaXN0IiwiQWRkIiwiQXBwIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic3RhdGUiLCJmaWx0ZXJlZEl0ZW1zIiwicXVlcnkiLCJpdGVtcyIsInRpdGxlIiwid2F0Y2hlZCIsImhhbmRsZUNoYW5nZSIsImJpbmQiLCJoYW5kbGVDbGljayIsImhhbmRsZUFkZCIsImhhbmRsZVdhdGNoIiwiaGFuZGxlVG9nZ2xlIiwiZSIsIm5ld01vdmllcyIsIm1hcCIsIm1vdmllIiwiY29uc29sZSIsImxvZyIsInNldFN0YXRlIiwidGFyZ2V0IiwidmFsdWUiLCJsaXN0IiwiZmlsdGVyIiwiaXRlbSIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwiYXJyYXkiLCJwdXNoIiwiaGFuZGxlTm90V2F0Y2giLCJyZW5kZXIiLCJtb3ZpZXMiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLE1BQVAsTUFBbUIsYUFBbkI7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLGdCQUF0QjtBQUNBLE9BQU9DLEdBQVAsTUFBZ0IsVUFBaEI7O0FBR0EsTUFBTUMsR0FBTixTQUFrQkMsTUFBTUMsU0FBeEIsQ0FBa0M7QUFDaENDLGNBQVlDLEtBQVosRUFBbUI7QUFDakIsVUFBTUEsS0FBTjtBQUNBLFNBQUtDLEtBQUwsR0FBYTtBQUNYQyxxQkFBZ0IsSUFETDtBQUVYQyxhQUFPLEVBRkk7QUFHWEMsYUFBTyxDQUNMLEVBQUNDLE9BQU8sWUFBUixFQUFzQkMsU0FBUyxJQUEvQixFQURLLEVBRUwsRUFBQ0QsT0FBTyxTQUFSLEVBQW1CQyxTQUFTLElBQTVCLEVBRkssRUFHTCxFQUFDRCxPQUFPLFVBQVIsRUFBb0JDLFNBQVMsSUFBN0IsRUFISyxFQUlMLEVBQUNELE9BQU8sVUFBUixFQUFvQkMsU0FBUyxJQUE3QixFQUpLLEVB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QTdFO0FBREYsT0FGSjtBQUtPLDBCQUFDLE1BQUQsSUFBUSxPQUFPLEtBQUtULEtBQUwsQ0FBV0UsS0FBMUIsRUFBaUMsY0FBYyxLQUFLSSxZQUFwRCxFQUFrRSxhQUFhLEtBQUtFLFdBQXBGLEdBTFA7QUFNUSxxQ0FBTyxNQUFLLFFBQVosRUFBcUIsU0FBVyxNQUFLLEtBQUtFLFdBQUwsRUFBckMsRUFBeUQsT0FBTSxTQUEvRCxHQU5SO0FBT1EscUNBQU8sTUFBSyxRQUFaLEVBQXFCLFNBQVcsTUFBSyxLQUFLb0IsY0FBTCxFQUFyQyxFQUE0RCxPQUFNLFdBQWxFLEdBUFI7QUFRSTtBQUFBO0FBQUEsVUFBSyxXQUFVLGtCQUFmO0FBQ0UsNEJBQUMsU0FBRCxJQUFXLE9BQU9FLE1BQWxCLEVBQTBCLGNBQWMsS0FBS3JCLFlBQTdDO0FBREY7QUFSSixLQURGO0FBY0Q7QUFsRitCLENBbUZqQzs7QUFFRCxJQUFJaUIsUUFBUSxFQUFaOztBQUVBLGVBQWVqQyxHQUFmIiwiZmlsZSI6IkFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTZWFyY2ggZnJvbSAnLi9TZWFyY2guanMnO1xuaW1wb3J0IE1vdmllTGlzdCBmcm9tICcuL01vdmllTGlzdC5qcyc7XG5pbXBvcnQgQWRkIGZyb20gJy4vQWRkLmpzJztcblxuXG5jbGFzcyBBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZmlsdGVyZWRJdGVtcyA6IG51bGwsXG4gICAgICBxdWVyeTogJycsXG4gICAgICBpdGVtczogW1xuICAgICAgICB7dGl0bGU6ICdNZWFuIEdpcmxzJywgd2F0Y2hlZDogdHJ1ZX0sXG4gICAgICAgIHt0aXRsZTogJ0hhY2tlcnMnLCB3YXRjaGVkOiB0cnVlfSxcbiAgICAgICAge3RpdGxlOiAnVGhlIEdyZXknLCB3YXRjaGVkOiB0cnVlfSxcbiAgICAgICAge3RpdGxlOiAnU3Vuc2hpbmUnLCB3YXRjaGVkOiB0cnVlfSxcbiAgICAgICAge3RpdGxlOiAnRXggTWFjaGluYScsIHdhdGNoZWQ6IHRydWV9LFxuICAgICAgXVxuICAgIH07XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UgPSB0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlQ2xpY2sgPSB0aGlzLmhhbmRsZUNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVBZGQgPSB0aGlzLmhhbmRsZUFkZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlV2F0Y2ggPSB0aGlzLmhhbmRsZVdhdGNoLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVUb2dnbGUgPSB0aGlzLmhhbmRsZVRvZ2dsZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgaGFuZGxlVG9nZ2xlKGUpIHtcbiAgICB2YXIgbmV3TW92aWVzID0gWy4uLnRoaXMuc3RhdGUuaXRlbXNdXG5cbiAgICBuZXdNb3ZpZXMgPSBuZXdNb3ZpZXMubWFwKG1vdmllID0+IHtcbiAgICAgICAgaWYgKG1vdmllLnRpdGxlID09PSBlICl7XG4gICAgICAgICAgbW92aWUud2F0Y2hlZCA9ICFtb3ZpZS53YXRjaGVkXG4gICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbW92aWU7XG4gICAgfSk7XG4gICAgY29uc29sZS5sb2coZSlcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZShlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7cXVlcnk6IGUudGFyZ2V0LnZhbHVlfSk7XG4gIH1cblxuICBoYW5kbGVDbGljaygpIHtcbiAgICB2YXIgbGlzdCA9IHRoaXMuc3RhdGUuaXRlbXMuZmlsdGVyKGl0ZW0gPT4gXG4gICAgICAgICAgaXRlbS50aXRsZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHRoaXMuc3RhdGUucXVlcnkudG9Mb3dlckNhc2UoKSkpO1xuICAgIHRoaXMuc2V0U3RhdGUoe2ZpbHRlcmVkSXRlbXM6IGxpc3R9KSBcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgaGFuZGxlQWRkKCl7XG4gICAgYXJyYXkucHVzaCh7dGl0bGU6dGhpcy5zdGF0ZS5xdWVyeSwgd2F0Y2hlZDogdHJ1ZX0pXG4gICAgdGhpcy5zZXRTdGF0ZSh7aXRlbXM6IGFycmF5fSlcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgaGFuZGxlV2F0Y2goKXtcbiAgICB2YXIgbGlzdCA9IHRoaXMuc3RhdGUuaXRlbXMuZmlsdGVyKGl0ZW0gPT4gXG4gICAgICBpdGVtLndhdGNoZWQgPT09IHRydWUpO1xuICAgIHRoaXMuc2V0U3RhdGUoe2ZpbHRlcmVkSXRlbXM6IGxpc3R9KSBcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgaGFuZGxlTm90V2F0Y2goKXtcbiAgICB2YXIgbGlzdCA9IHRoaXMuc3RhdGUuaXRlbXMuZmlsdGVyKGl0ZW0gPT4gXG4gICAgICBpdGVtLndhdGNoZWQgPT09IGZhbHNlKTtcbiAgICB0aGlzLnNldFN0YXRlKHtmaWx0ZXJlZEl0ZW1zOiBsaXN0fSkgXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQgbW92aWVzOyBcbiAgICBtb3ZpZXMgPSB0aGlzLnN0YXRlLmZpbHRlcmVkSXRlbXMgPyB0aGlzLnN0YXRlLmZpbHRlcmVkSXRlbXMgOiB0aGlzLnN0YXRlLml0ZW1zXG4gICAgXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW92aWUtbGlzdFwiID5cbiAgICAgICAgPGgyPk1vdmllTGlzdDwvaDI+XG4gICAgICAgICAgPG5hdiBjbGFzc05hbWU9XCJhZGQtbW92aWVcIiA+XG4gICAgICAgICAgICA8QWRkIHZhbHVlPXt0aGlzLnN0YXRlLml0ZW19IGhhbmRsZVRpdGxlPXt0aGlzLmhhbmRsZUNoYW5nZX0gaGFuZGxlQWRkPXt0aGlzLmhhbmRsZUFkZH0vPlxuICAgICAgICAgIDwvbmF2PlxuICAgICAgICAgICAgIDxTZWFyY2ggdmFsdWU9e3RoaXMuc3RhdGUucXVlcnl9IGhhbmRsZUNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9IGhhbmRsZUNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfSAvPlxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIG9uQ2xpY2sgPSB7KCk9PiB0aGlzLmhhbmRsZVdhdGNoKCl9IHZhbHVlPSdXYXRjaGVkJyAvPlxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIG9uQ2xpY2sgPSB7KCk9PiB0aGlzLmhhbmRsZU5vdFdhdGNoKCl9IHZhbHVlPSdOb3QgV2F0Y2gnIC8+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb3ZpZS1saXN0LWVudHJ5XCI+XG4gICAgICAgICAgICA8TW92aWVMaXN0IGl0ZW1zPXttb3ZpZXN9IGhhbmRsZVRvZ2dsZT17dGhpcy5oYW5kbGVUb2dnbGV9Lz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn07XG5cbmxldCBhcnJheSA9IFtdO1xuXG5leHBvcnQgZGVmYXVsdCBBcHA7Il19